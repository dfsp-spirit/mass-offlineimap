#!/bin/bash
# mass-offlineimap -- sync a number of mail accounts between an old and a new mail server (i.e., move all emails over). Also supports local backups.
# written by Tim Sch√§fer, 12/2017

APPTAG='[MOI]'
SETTINGS_DIR='./settings'
FILE_GENERAL="$SETTINGS_DIR/general"
FILE_OLDSERVER="$SETTINGS_DIR/oldserver"
FILE_NEWSERVER="$SETTINGS_DIR/newserver"
FILE_ACCOUNT_MAPPING="$SETTINGS_DIR/account_mapping"
GENERATE_CFG_LOCAL='NO'
GENERATE_CFG_REMOTE='NO'
LOCAL_BACKUP_DIR='./local_email_backup'
GENERATED_CONFIGS_OUTPUT_DIR='./generated_cfgs'


# Functions

function show_help {
    echo "$APPTAG USAGE: $0 <options>"
	echo "$APPTAG valid options are:"
	echo "$APPTAG  -l    : generate local config  (create a local backup of server1)"
	echo "$APPTAG  -r    : generate remote config (sync server1 to another server2)"
	echo "$APPTAG  -h    : show this help and exit"
} 
				
# Let's go

echo "$APPTAG mass-offlineimap -- sync a number of mail accounts between an old and a new mail server"

# Parse command line args (using getops)

OPTIND=1         # Reset in case getopts has been used previously in the shell.
# Initialize our own variables:


while getopts "hlr" opt; do
    case "$opt" in
    h)
        show_help
        exit 0
        ;;
    l)  GENERATE_CFG_LOCAL="YES"
        ;;
    r)  GENERATE_CFG_REMOTE="YES"
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

echo "$APPTAG GENERATE_CFG_LOCAL=$GENERATE_CFG_LOCAL, GENERATE_CFG_REMOTE='$GENERATE_CFG_REMOTE', Leftovers: $@"
echo "$APPTAG Using old server data from '$FILE_OLDSERVER', new server data from '$FILE_NEWSERVER', account mapping data from '$FILE_ACCOUNT_MAPPING'."

if [ "$GENERATE_CFG_LOCAL" = "NO" -a "$GENERATE_CFG_REMOTE" = "NO" ]; then 
  echo "No task specified."
  show_help
  exit 0
fi

if [ "$GENERATE_CFG_LOCAL" = "YES" -a "$GENERATE_CFG_REMOTE" = "YES" ]; then 
  echo "Two tasks specified. Must specify exactly one task (-l or -r)."
  show_help
  exit 1
fi


if [ ! -d "$GENERATED_CONFIGS_OUTPUT_DIR" ]; then
    echo "$APPTAG     Generated config output directory ${GENERATED_CONFIGS_OUTPUT_DIR} does not exist, creating it."
    mkdir -p "$GENERATED_CONFIGS_OUTPUT_DIR"
fi

# The account mapping file has one line per account in format: '<old_user> <new_user> <old_pwd> <new_pwd>'. Separator is one space.
ACCOUNT_NUMBER=0
while read -r line || [[ -n "$line" ]]; do
    ACCOUNT_NUMBER=$((ACCOUNT_NUMBER + 1))
	ACCOUNT_NAME="acc${ACCOUNT_NUMBER}"
    # Read account data from text file:
    OLD_USER=$(echo "$line" | awk '{print $1}')
    NEW_USER=$(echo "$line" | awk '{print $2}')
    OLD_PASSWORD=$(echo "$line" | awk '{print $3}')
    NEW_PASSWORD=$(echo "$line" | awk '{print $4}')

    # If the new password is not given, assume it is identical to the old one
    if [ -z "$NEW_PASSWORD" ]; then
        NEW_PASSWORD="$OLD_PASSWORD"
    fi

    echo "$APPTAG * Processing line $ACCOUNT_NUMBER for old user: $OLD_USER"
    #echo "$APPTAG     Found in line $ACCOUNT_NUMBER old user: $OLD_USER, new user $NEW_USER, old password $OLD_PASSWORD, new password $NEW_PASSWORD."
    
    # Now create the config file for this user:
    FILE_USER_OFFLINEIMAP_CONF="${GENERATED_CONFIGS_OUTPUT_DIR}/offlineimap_local_${OLD_USER}"

    if [ "$GENERATE_CFG_REMOTE" = "YES" ]; then
        FILE_USER_OFFLINEIMAP_CONF="${GENERATED_CONFIGS_OUTPUT_DIR}/offlineimap_remote_${OLD_USER}"
    fi

    echo "$APPTAG     Creating config file $FILE_USER_OFFLINEIMAP_CONF for user $OLD_USER"
    touch "$FILE_USER_OFFLINEIMAP_CONF"
    echo '' > "$FILE_USER_OFFLINEIMAP_CONF"
    echo "# Offlineimap config file for user $OLD_USER, auto-generated by mass-offlineimap." >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo "# To use this, run: offlineimap -c <this_file>" >> "$FILE_USER_OFFLINEIMAP_CONF"
    
    # Add account information
	echo "[Account mass-offlineimap-${ACCOUNT_NAME}]" >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo "remoterepository = oldserver-${ACCOUNT_NAME}" >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo "localrepository = newserver-${ACCOUNT_NAME}" >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo '' >> "$FILE_USER_OFFLINEIMAP_CONF"
    
    # Add information on old server
	echo "[Repository oldserver-${ACCOUNT_NAME}]" >> "$FILE_USER_OFFLINEIMAP_CONF"
    cat "$FILE_OLDSERVER" >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo "remoteuser = ${OLD_USER}"  >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo "remotepass = ${OLD_PASSWORD}"  >> "$FILE_USER_OFFLINEIMAP_CONF"
    echo '' >> "$FILE_USER_OFFLINEIMAP_CONF"
    
    if [ "$GENERATE_CFG_REMOTE" = "YES" ]; then
        echo "$APPTAG     Generating REMOTE sync config in file ${FILE_USER_OFFLINEIMAP_CONF}"
        # Add information on new mirror server
		echo "[Repository newserver-${ACCOUNT_NAME}]" >> "$FILE_USER_OFFLINEIMAP_CONF"
        cat "$FILE_NEWSERVER" >> "$FILE_USER_OFFLINEIMAP_CONF"
        echo "remoteuser = ${NEW_USER}"  >> "$FILE_USER_OFFLINEIMAP_CONF"
        echo "remotepass = ${NEW_PASSWORD}"  >> "$FILE_USER_OFFLINEIMAP_CONF"
    fi
	
    if [ "$GENERATE_CFG_LOCAL" = "YES" ]; then
        # Add information on local backup dir
	    echo "$APPTAG     Generating LOCAL backup config in file ${FILE_USER_OFFLINEIMAP_CONF}"
        if [ ! -d "$LOCAL_BACKUP_DIR" ]; then
            echo "$APPTAG     Local base backup dir ${LOCAL_BACKUP_DIR} does not exist, creating it."
	        mkdir -p "$LOCAL_BACKUP_DIR" || echo "$APPTAG ERROR: Failed to create directory $LOCAL_BACKUP_DIR"
	    fi
	
	    LOCAL_BACKUP_DIR_USER="${LOCAL_BACKUP_DIR}/${OLD_USER}"
	
        if [ -d "$LOCAL_BACKUP_DIR_USER" ]; then
	        echo "$APPTAG     Mail backup dir $LOCAL_BACKUP_DIR_USER for user $OLD_USER already exists, keeping the data in there."
        else
	        mkdir -p "$LOCAL_BACKUP_DIR_USER" || echo "$APPTAG ERROR: Failed to create directory $LOCAL_BACKUP_DIR_USER"
	    fi
	
        echo "[Repository newserver-${ACCOUNT_NAME}]" >> "$FILE_USER_OFFLINEIMAP_CONF"
        echo "type = Maildir" >> "$FILE_USER_OFFLINEIMAP_CONF"
        echo "localfolders = ${LOCAL_BACKUP_DIR_USER}" >> "$FILE_USER_OFFLINEIMAP_CONF"
    fi
	
done < "$FILE_ACCOUNT_MAPPING"


echo "$APPTAG All config files for offlineimap created. Note that the accounts are NOT synced yet!"
echo "$APPTAG   * To sync/backup a single account: offlineimap -c <configfile>"
echo -n "$APPTAG"
echo '   * To backup all accounts: for FILE in ./generated_cfgs/offlineimap_local_*; do echo "##### Processing file $FILE ####"; offlineimap -c $FILE && echo "KKKKK Done processing file $FILE, no problems. KKKKK" || echo "EEEEE Errors occured while processing file $FILE. EEEEE"; done 2>&1 | tee sync_local.log'
echo -n "$APPTAG"
echo '   * To sync all accounts: for FILE in ./generated_cfgs/offlineimap_remote_*; do echo "##### Processing file $FILE #####"; offlineimap -c $FILE && echo "KKKKK Done processing file $FILE, no problems. KKKKK" || echo "EEEEE Errors occured while processing fil $FILE. EEEEE"; done 2>&1 | tee sync_remote.log'
echo "$APPTAG Exiting."

